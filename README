
                                    KEEDAY
                                    ======

This small tool is a password manager, novel in that it does not let you choose
your own passwords, but generates them itself without storing them directly. In
fact, you select your own human-readable "tokens", and the tool will generate a
strong password from the tokens (for instance, a combination of a website and a
username, or perhaps an email provider & address) using a secret passphrase.

The following introduction assumes you setup a symlink "keeday" to the tool. If
this is not the case, replace "keeday" by "./keeday.py", or "python3 keeday.py"
or whatever is needed to invoke the script with Python 3.x (*not* Python 2.7!).

Now, suppose you had a Gmail account, and were called John Doe. First, create a
new keeday user, using the command below:

 keeday new johndoe                    (or john, "john doe" with quotes, etc..)

You will be prompted for a passphrase, enter it and REMEMBER IT, because you'll
need to enter it, whenever you want to look up your passwords. You will need to
remember only this passphrase, as everything else is saved, however without the
passphrase, all this information is useless to anyone trying to break into your
accounts, as each password cryptographically depends on the passphrase.

This will create a new file at "~/.keeday/johndoe.key" which is in JSON format.

 ------------------------------------------------------------------------------

Now, create a new password entry as follows:

 keeday add johndoe "Gmail" "johndoe@gmail.com"

Let's parse this, step by step. The passed command "add" indicates that we want
the script to add a new password entry. The second argument should be your user
name you entered earlier, as we'll be adding a password entry to that.

The two following arguments represent the following:

Third : Service or website the generated password will be used for
Fourth: Your identifier on said service or website (user name, or whatever)

As you can observe we want to add a password for the Gmail service, and on this
mail server our identifier is probably just our email address.

Note that it is all up to you what to write in those fields as all the above is
purely indicative and you can use the two fields in any way you see fit.

Also note, that quotes around the command arguments are needed if you happen to
use arguments which contain spaces (as usual). In this case they are not needed
and removing the quotation marks around the arguments will make no difference.

 ------------------------------------------------------------------------------

There is a optional argument -f or --fmt which lets you specify a custom format
for your password. It is used at the command line as follows:
    
 keeday add johndoe "Gmail" "johndoe@gmail.com" -f [format]

Where [format] is a valid password formatting type recognized by keeday such as
the "Base64" or "Hexadecimal" ones. You can also specify an integer parameter:

 keeday add johndoe "Gmail" "johndoe@gmail.com" -p [param]

Which generally represents the length of the password obtained.

You can omit both options and they will default to "Base64" and 25 respectively
which corresponds to a 25-character long Base64-encoded password. Providing the
format but not the parameter is valid, and the default parameter will change to
the default value specified for the format you selected.

Specifying only the parameter and not the format is valid as well, in this case
you will simply be choosing the length of your Base64-encoded password, ranging
from 3 to 80 characters.

This is helpful if you need your password to satisfy specific requirements, and
in fact you can even write your own password formatter, by following a template
in the pwfmt.py file, even with minimal programming skills.

See the pwfmt.py file for more information on this.

Please note that the generated password is secure ONLY up to user, service, and
identifier. You CANNOT securely reuse the same password in two different places
merely by changing the password format. This can not happen if you use the tool
properly but should be remembered if you often change your passwords.

 ------------------------------------------------------------------------------

Now that the password entry has been added to your user file, you may type:

 keeday get johndoe "Gmail" "johndoe@gmail.com"

You will be prompted for a passphrase once more, enter the same one you entered
upon user creation. The script will let you know if you type it wrong.

If you typed the arguments right, a password should appear - this password will
always be the same, given the same two fields and passphrase. The password will
be formatted according to the format you chose upon adding it. You can use this
password, in this case, on your Gmail account.

If you only have one identifier under a given service (in this case if you only
have this Gmail address in your user file) then you may omit the identifier and
the tool will automatically infer it for you. Therefore, in this case:

 keeday get johndoe "Gmail"

Will produce the same results. If you have more than one Gmail address, though,
the tool will ask you to specify which one you mean, to remove ambiguity.

 ------------------------------------------------------------------------------

If you need to delete a password entry, just type:

 keeday delete johndoe "Gmail" "johndoe@gmail.com"

The corresponding password entry will be deleted, and no other password will be
affected. Note you can get your original password back - if you just retype the
original fields in, and update the password to where it was when you deleted it
(more on that later), and you should get the exact same password back, assuming
you didn't change the passphrase in the meantime.

 ------------------------------------------------------------------------------

This is it for basic operation of the tool!! However, there exist a couple more
commands I wish to talk about. The first one is the following:

 keeday passphrase [user]

This will reset your passphrase. You do not need to provide the old passphrase,
but there's a catch - changing the passphrase will change *every* password that
the tool will produce, so you will need to update the password on every website
you frequent if you do this. Therefore, only do it if your passphrase is stolen
or compromised in general, and don't let that happen often - preferably never.

This is not a shortcoming of keeday - it's the price you pay for the ability to
not store passwords anywhere on the computer by calculating them on the fly.

 ------------------------------------------------------------------------------

The second command is:

 keeday update [user] [service] [identifier]

This is used to update an individual password if you ever need to change it for
some reason. This will not affect any other password you have in any way.

The reverse also exists:

 keeday revert [user] [service] [identifier]

Which will instead go back to the previous password, in case you need it again.
If there is no previous password ("--update" was never used on this entry) then
the command will fail.

 ------------------------------------------------------------------------------

There is also a command to remove a given user, which is just:

 keeday remove [user]

And simply - as you would expect - removes the specified user deleting the file
corresponding to this user, and all his password entries. We make absolutely no
guarantees as to how recoverable this data is (since after all, it is not meant
to be sensitive data) so this should be used for maintenance purposes only.

 ------------------------------------------------------------------------------

Another useful command is shown below:

 keeday merge [user] [source]

Which does exactly what it says. It will merge all entries in the [source] user
file which don't already exist in [user]. This is a conservative merge and will
not delete any entry from any file ([source] is never modified). You might find
it useful for synchronizing user files. Counters are currently ignored, thus if
you have updated or reverted passwords you will need to update those manually.

Make sure you merge files in the right direction - the simplest way to remember
is that, for every keeday command, the first argument [user] is always the user
on which the command operates.

 ------------------------------------------------------------------------------

Finally, there is one final instruction:

 keeday clean [user]

All this will do is read in the user file, parse it, and output it back to file
with proper formatting. This serves no functional purpose other than fixing any
formatting you may have removed while manually editing your file - but remember
that JSON does not require formatting, so this is just for your convenience.

For a quick reminder on how to use the tool, you can use the venerable:

 keeday --help                    or                    keeday [command] --help

For more information on each command, you can consult the man page:

 man man/keeday                   [or man keeday if you installed the man page]

-------------------------------------------------------------------------------

That's all, folks! If you need more direct control, find your user file:

 cd ~/.keeday/
 cat user.key                       [replace "user" with your chosen user name]

This is a JSON file containing authentication data and each individual password
entry, which you can edit at will. If keeday won't run after you mess with this
file, make sure your JSON syntax is correct, as that's the most likely cause.

 ------------------------------------------------------------------------------

Make sure to regularly up back your user file, as mentioned before, it does not
need to be kept secret and can be disclosed, if you are OK with making websites
and services you frequent public knowledge. The user file won't disclose either
your passphrase or your individual passwords.

Of course you can always encrypt the user file for backup or archival with your
favorite file encryption tool, it's just a simple text file.

 ------------------------------------------------------------------------------

Thank you for using keeday!

~ TomCrypto (contact: github)
